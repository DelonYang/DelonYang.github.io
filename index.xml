<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>http://delonyang.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Mar 2019 10:47:54 +0800</lastBuildDate>
    
	<atom:link href="http://delonyang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>css</title>
      <link>http://delonyang.github.io/note/css/</link>
      <pubDate>Tue, 19 Mar 2019 10:47:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/css/</guid>
      <description>CSS CSS实例  背景设置：图片背景、颜色、位置
body{ background-image: url(); background-color: red; background-repeat: repeat-x; /* 水平重复 */ background-position: right top; /* 设置渐变背景 */ background-color: #8EC5FC; background-image: linear-gradient(62deg, #8EC5FC 0%, #E0C3FC 100%); }  文本
 文本颜色
body { color: red;/* 没有特别设置的该页面所有文本都会是红色 */ } p { color: #00f000; }  对齐、缩进
```css h1 p{ text-alian: center; /* left, center, right, justfiy; */ text-indent: 2em; }
 装饰
p.main{ text-decoration: none; /* overline, line-through, underline; */ text-transform: uppercase;/* uppercase, lowercase, capitalize; */ line-height: 100%; /* 行高 */ letter-spacing: 2px; /* 字符间距 */ }  文本参考</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://delonyang.github.io/note/go/</link>
      <pubDate>Thu, 07 Mar 2019 15:38:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/go/</guid>
      <description> Go goscript 1. Http  获取http请求的IP，Path
ip, port, err := net.SplitHostPort(req.RemoteAddr) path := req.URL.Path   </description>
    </item>
    
    <item>
      <title>Javascript 学习</title>
      <link>http://delonyang.github.io/note/js/</link>
      <pubDate>Thu, 07 Mar 2019 15:38:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/js/</guid>
      <description> Javascript 学习 终于开始Javascript学习了！
类型 常见的js类型：
 Number String Boolean Symbol Object  Function Array Date RegExp Error  Null Undefined  Number Number包括了整型、单精度、双精度； 计算时候容易出现脑残问题：0.1 + 0.2 = 0.30000000000000004.
常用函数：
// 字符串 -&amp;gt; 整数 parseInt(&#39;100&#39;, 10) // 字符串 -&amp;gt; 浮点数 parseFloat(&#39;1.5&#39;)  </description>
    </item>
    
    <item>
      <title>vue</title>
      <link>http://delonyang.github.io/note/vue/</link>
      <pubDate>Wed, 20 Feb 2019 16:47:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/vue/</guid>
      <description>vue vuex vuex就是app的数据源，一个store
 state, 状态，相当于vue的data，存放各种数据； getter，相当于计算属性，主要对state的数据做二次加工，依赖state，当state改变时，getter自动发生更改； mutation， 直接改变state的途径，通过store.commit(xxx，payload), 不能有异步方法 action， store的异步任务，异步任务 -&amp;gt; store.commit改变state  其实state是我们需要处理的数据源，getter是state的变种，依赖于state， 而mutation、action更改state的方法，mutation直接更改，action通过mutation间接更改；
State 在vue中使用state： this.$store.state.xxx
使用mapState()展开到vue文件的计算属性中
Getter getter比state稍微复杂一点点，就是getter可以传参数。
{ getters: { getTodoById: (state) =&amp;gt; (id) =&amp;gt; { return state.todos.find(todo =&amp;gt; todo.id === id) }, todosCount: (state) =&amp;gt; { return state.todos.length } } } //xx.vue { computed: { todosCount() { return this.$store.getters.todosCount }, getTodoById(id) { return this.$store.getters.getTodoById(id) } } }  使用mapGetter分发</description>
    </item>
    
    <item>
      <title>Flask</title>
      <link>http://delonyang.github.io/note/flask/</link>
      <pubDate>Tue, 29 Jan 2019 16:47:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/flask/</guid>
      <description>#Flask
SQLAlchemy 1. 使用步骤 2. api及关系处理 1. 一对多关系
class User(db.Model): id=db.Column(db.Integer, primary_key=True) name=db.Column(db.String(60), nullable=False, unique=True) addresses=db.relationship(&#39;Address&#39;, backref=&#39;user&#39;, lazy=True) class Address(db.Model): id=db.Column(db.Integer, primary_key=True) info=db.Column(db.String(100), nullable=False) user_id=db.Column(db.Integer, db.ForeignKey(&#39;user.id&#39;), nullable=False)  其中relationship函数的参数为： - backref 在一对多或多对一之间建立双向关系 - lazy:默认值是True, 懒加载 - remote_side: 表中的外键引用的是自身时 - secondary: 多对多指定中间表关键字 - cascade: 级联删除 - order_by: 在一对多的关系中，设置排序，比如：
addresses=db.relationship(&#39;Address&#39;, backref=&#39;user&#39;, lazy=True, order_by=lambda: desc(Address.email))  类型对照
   类型名 Python类型 说明     Integer int -   SmallInteger int -   BigInteger int / long -   Float float    Numeric decimal.</description>
    </item>
    
    <item>
      <title>Awesome</title>
      <link>http://delonyang.github.io/note/awesome/</link>
      <pubDate>Fri, 18 Jan 2019 16:47:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/awesome/</guid>
      <description> golang python  https://github.com/joke2k/faker Faker Data， 很好用   Utils  https://github.com/tonsky/FiraCode 一款 我中意的字体  </description>
    </item>
    
    <item>
      <title>好记性不如烂博客！</title>
      <link>http://delonyang.github.io/note/note/</link>
      <pubDate>Fri, 18 Jan 2019 16:38:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/note/</guid>
      <description>Git 常用命令:
 远程库： git init --bare 在远程库中新建项目 git remote -v 查看远程库 git remote add url stash: git stash 将当前工作区、暂存区保存 git stash save &amp;quot;msg&amp;quot; 保存并起别名 git stash list git stash apply [--index] [&amp;lt;stash&amp;gt;] 恢复，但不会删除保存内容 git stash pop [--index] [&amp;lt;stash&amp;gt;] 恢复并删除 git stash clear 忽略已追踪的文件： git rm -r --cached log* git add . &amp;amp;&amp;amp; git commit -m &amp;quot;&amp;quot; 修改.gitignore git reset &amp;quot;commitID&amp;quot; 版本回退 git checkout -- file 丢弃更改 设置换行符： git config --global core.</description>
    </item>
    
  </channel>
</rss>