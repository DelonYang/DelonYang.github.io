<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>http://delonyang.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 18 Jan 2019 16:47:54 +0800</lastBuildDate>
    
	<atom:link href="http://delonyang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Awesome</title>
      <link>http://delonyang.github.io/note/awesome/</link>
      <pubDate>Fri, 18 Jan 2019 16:47:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/awesome/</guid>
      <description> golang python  https://github.com/joke2k/faker Faker Data， 很好用   Utils </description>
    </item>
    
    <item>
      <title>好记性不如烂博客！</title>
      <link>http://delonyang.github.io/note/note/</link>
      <pubDate>Fri, 18 Jan 2019 16:38:54 +0800</pubDate>
      
      <guid>http://delonyang.github.io/note/note/</guid>
      <description>Git 常用命令:
 远程库： git init --bare 在远程库中新建项目 git remote -v 查看远程库 git remote add url stash: git stash 将当前工作区、暂存区保存 git stash save &amp;quot;msg&amp;quot; 保存并起别名 git stash list git stash apply [--index] [&amp;lt;stash&amp;gt;] 恢复，但不会删除保存内容 git stash pop [--index] [&amp;lt;stash&amp;gt;] 恢复并删除 git stash clear 忽略已追踪的文件： git rm -r --cached log* git add . &amp;amp;&amp;amp; git commit -m &amp;quot;&amp;quot; 修改.gitignore git reset &amp;quot;commitID&amp;quot; 版本回退 git checkout -- file 丢弃更改 设置换行符： git config --global core.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://delonyang.github.io/note/flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://delonyang.github.io/note/flask/</guid>
      <description>#Flask
SQLAlchemy 1. 使用步骤 2. api及关系处理 1. 一对多关系
class User(db.Model): id=db.Column(db.Integer, primary_key=True) name=db.Column(db.String(60), nullable=False, unique=True) addresses=db.relationship(&#39;Address&#39;, backref=&#39;user&#39;, lazy=True) class Address(db.Model): id=db.Column(db.Integer, primary_key=True) info=db.Column(db.String(100), nullable=False) user_id=db.Column(db.Integer, db.ForeignKey(&#39;user.id&#39;), nullable=False)  其中relationship函数的参数为： - backref 在一对多或多对一之间建立双向关系 - lazy:默认值是True, 懒加载 - remote_side: 表中的外键引用的是自身时 - secondary: 多对多指定中间表关键字 - cascade: 级联删除 - order_by: 在一对多的关系中，设置排序，比如：
addresses=db.relationship(&#39;Address&#39;, backref=&#39;user&#39;, lazy=True, order_by=lambda: desc(Address.email))  类型对照
   类型名 Python类型 说明     Integer int -   SmallInteger int -   BigInteger int / long -   Float float    Numeric decimal.</description>
    </item>
    
  </channel>
</rss>